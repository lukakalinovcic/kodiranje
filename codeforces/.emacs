(global-font-lock-mode t)
(column-number-mode 1)
(show-paren-mode 1)
(fset 'yes-or-no-p 'y-or-n-p)

(setq default-tab-width 2)
(setq compilation-ask-about-save nil)

(make-variable-buffer-local 'ret)
(make-variable-buffer-local 'exe-name)
(make-variable-buffer-local 'quick-compile-command)

(defun remove-suffix (name)
  "Remove any extension from a file name"
  (if (string-match "\\(.*\\)\\." name)
      (substring name (match-beginning 1) (match-end 1))
    name))
       
(defun save-and-quick-compile (&optional arg) (interactive)
  (save-buffer arg)
  (if (file-readable-p "./Makefile")
                (compile "make")
        (compile (concat "g++ -o \"" exe-name "\" \"" buffer-file-name "\" -O2 -Wall -lm --std=c++17 -I/home/kalinov/kodiranje")))
)

(defun topcoder-compile (&optional arg) (interactive)
  (tc-precompilation)
  (save-buffer arg)
  (compile (concat "g++ -o \"" exe-name "\" \"" buffer-file-name "\" -O2 -Wall -lm --std=c++11"))
)
        
(defun quick-run () (interactive)
  (shell-command (concat "\"" exe-name "\"")))

(defun my-c-mode-hook () (interactive)
  (setq c-tab-always-indent t) ;; Tab retabifies    
  (setq indent-tabs-mode nil) ;; spejsovi, ne tabovi
  (setq c-basic-offset 2) ;; tab 2
  (setq max-mini-window-height 10)
  (c-toggle-hungry-state 1)
  (setq exe-name (concat (remove-suffix buffer-file-name) ".exe"))
  (define-key c-mode-base-map "\M-2" 'save-and-quick-compile)
  (define-key c-mode-base-map "\M-3" 'quick-run)
  (define-key c-mode-base-map (kbd "`") 'dabbrev-expand)
  (define-key c-mode-base-map (kbd "C-M-2") 'topcoder-compile)
  (define-key c-mode-base-map (kbd "C-c c") 'comment-region)
  (define-key c-mode-base-map (kbd "C-c u") 'uncomment-region)
  (define-key c-mode-base-map (kbd "C-c r") 'query-replace)
  (define-key c-mode-base-map (kbd "C-c e") 'query-replace-regexp)
  (define-key c-mode-base-map (kbd "C-c l") 
         (function (lambda () (interactive) (load-file "~/.emacs"))))
  (define-key c-mode-base-map "\M-p" 'previous-error)
  (define-key c-mode-base-map "\M-n" 'next-error)
  (define-key c-mode-base-map (kbd "<C-tab>") 'c-indent-command)
  (define-abbrev c++-mode-abbrev-table "fr1" "" 'luka-for1 )
  (define-abbrev c++-mode-abbrev-table "fr2" "" 'luka-for2 )
  (define-abbrev c++-mode-abbrev-table "fr3" "" 'luka-for3 )
  (define-abbrev c++-mode-abbrev-table "fr" "" 'luka-for3 )
  (define-abbrev c++-mode-abbrev-table "forit2" "" 'luka-forit2 )
  (define-abbrev c++-mode-abbrev-table "forit3" "" 'luka-forit3 )
  (define-abbrev c++-mode-abbrev-table "forit" "" 'luka-forit2 )
  (define-abbrev c++-mode-abbrev-table "opmanje" "" 'luka-manje )
  (define-abbrev c++-mode-abbrev-table "srt" "" 'luka-sort )
  (define-abbrev c++-mode-abbrev-table "rev" "" 'luka-reverse )
  (define-abbrev c++-mode-abbrev-table "all" "" 'luka-all )
  (define-abbrev c++-mode-abbrev-table "permute" "" 'luka-permute )
  (define-abbrev c++-mode-abbrev-table "setun" "" 'luka-set-union )
  (define-abbrev c++-mode-abbrev-table "setint" "" 'luka-set-intersection )
  (define-abbrev c++-mode-abbrev-table "memnull" "" 'luka-memnull )
  (define-abbrev c++-mode-abbrev-table "meminf" "" 'luka-meminf )
  (define-abbrev c++-mode-abbrev-table "fori" "for (int i = 0; i < n; ++i)" )
  (define-abbrev c++-mode-abbrev-table "forj" "for (int j = 0; j < n; ++j)" )
  (define-abbrev c++-mode-abbrev-table "fork" "for (int k = 0; k < n; ++k)" )
  (define-abbrev c++-mode-abbrev-table "defint64" "typedef long long int64;" )
  (define-abbrev c++-mode-abbrev-table "defllint" "typedef long long llint;" )
  (define-abbrev c++-mode-abbrev-table "defpar" "typedef pair<int, int> par;" )
  (define-abbrev c++-mode-abbrev-table "defgcd" "int gcd(int a, int b) { return b == 0 ? a : gcd(b, a%b); }" )
  (define-abbrev c++-mode-abbrev-table "inf6" "const int inf = 1000000;" )
  (define-abbrev c++-mode-abbrev-table "inf9" "const int inf = 1000000000;" )
  (define-abbrev c++-mode-abbrev-table "inf12" "const llint inf = 1000000000000LL;" )
  (define-abbrev c++-mode-abbrev-table "inf15" "const llint inf = 1000000000000000LL;" )
  (define-abbrev c++-mode-abbrev-table "inf18" "const llint inf = 1000000000000000000LL;" )
  (define-abbrev c++-mode-abbrev-table "delta4" "const int dx[4] = { -1, 0, 1, 0 };\nconst int dy[4] = { 0, 1, 0, -1 };" )  
  (define-abbrev c++-mode-abbrev-table "delta8" "const int dx[8] = { -1, -1, 0, 1, 1, 1, 0, -1 };\nconst int dy[8] = { 0, 1, 1, 1, 0, -1, -1, -1 };" )
  (define-abbrev c++-mode-abbrev-table "delta6" "const int dx[6] = { -1, -1, 0, 1, 1, 0 };\nconst int dy[6] = { 0, 1, 1, 0, -1, -1 };" )
  (define-abbrev c++-mode-abbrev-table "deltakonj" "const int dx[8] = { 1, 2, 2, 1, -1, -2, -2, -1 };\nconst int dy[8] = { -2, -1, 1, 2, 2, 1, -1, -2 };" )  
  (define-abbrev c++-mode-abbrev-table "hexgrid" "int xx, yy, k = 1;\nnum[x[0]=xx=100][y[1]=yy=100] = 0;\nfor( int i = 1; k < 12000; ++i )\nfor( int d = 0; d < 6; ++d )\nfor( int j = 0; j < i - (d==1); ++j, ++k )\nnum[x[k]=xx+=dx[d]][y[k]=yy+=dy[d]] = k;" )
  (define-abbrev c++-mode-abbrev-table "sparse" "struct sparse_graph {\nvector<edge> E;\nvector< vector<edge>::iterator > V;\n\nvoid insert_edge( const edge &e ) {\nE.push_back( e );\n}\n\nvoid init() {\nV.resize(n+1);\nsort( E.begin(), E.end(), cmp_u );\nV[0] = E.begin();\nfor( int i = 1; i <= n; ++i )\nfor( V[i] = V[i-1]; V[i] != E.end() && V[i]->u < i; ++V[i] );\n}\n\ninline vector<edge>::iterator begin( int u ) { return V[u]; }\ninline vector<edge>::iterator end( int u ) { return V[u+1]; }\n};" )
  (define-abbrev c++-mode-abbrev-table "tmpl" "#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\ntypedef long long int64;\n\nint main() {\n  return 0;\n}\n" )
)

  
(global-set-key (kbd "C-c d") (function (lambda () (interactive) (shell-command "start cmd &"))))
(global-set-key (kbd "C-x C-b") 'buffer-menu)
(global-set-key (kbd "C-c l") 
                                         (function (lambda () (interactive)
                                                                         (byte-compile-file "~/.emacs")
                                                                         (byte-compile-file "~/.abbrevs.el")
                                                                         (byte-compile-file "~/.topcoder.el")
                                                                         (byte-compile-file "~/.topcoder.headers.el")
                                                                         (load "~/.emacs") (load "~/.abbrevs") (load "~/.topcoder"))))

(add-hook 'c-mode-common-hook 'my-c-mode-hook)

(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(dabbrev-case-replace nil))
(custom-set-faces
  ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(font-lock-builtin-face ((((class color) (background light)) (:foreground "magenta"))))
 '(font-lock-comment-face ((((class color) (background light)) (:foreground "forest green"))))
 '(font-lock-keyword-face ((((class color) (background light)) (:foreground "blue"))))
 '(font-lock-string-face ((((class color) (background light)) (:foreground "dim gray")))))


(defun pitaj (tmp text) (interactive) 
  (c-indent-command) (insert tmp)
  (setq ret (read-no-blanks-input text))
  (delete-backward-char (length tmp) )
)

(defun luka-for (i lo hi) (interactive) 
  (insert "for (int " )
  (when (eq i nil ) (pitaj "" "Ime varijable: " ) (setq i ret) )
  (insert i " = " )
  (when (eq lo nil ) (pitaj "" "Donja granica: " ) (setq lo ret) )
  (insert lo "; " i " < " )
  (when (eq hi nil ) (pitaj "" "Gornja granica: " ) (setq hi ret) )
  (insert hi "; ++" i ")" )
)
(defun luka-for1 () (interactive) (luka-for nil "0" "n" ) )
(defun luka-for2 () (interactive) (luka-for nil "0" nil ) )
(defun luka-for3 () (interactive) (luka-for nil nil nil ) )

(defun luka-forit (tip it cont) (interactive) 
  (insert "for (" )
  (when (eq tip nil ) (pitaj "" "Tip containera: " ) (setq tip ret) )
  (insert tip "::iterator " )
  (when (eq it nil ) (pitaj "" "Ime iteratora: " ) (setq it ret) )
  (insert it " = " )
  (when (eq cont nil ) (pitaj "" "Container: " ) (setq cont ret) )
  (insert cont ".begin(); " it " != " cont ".end(); ++" it ")" ) 
)
(defun luka-forit2 () (interactive) (luka-forit nil "it" nil ) )
(defun luka-forit3 () (interactive) (luka-forit nil nil nil ) )

(defun luka-manje () (interactive) 
  (c-indent-command) (insert "bool operator<(const " )
  (pitaj "" "Ime structa: " ) (setq struct ret)
  (insert struct " &A, const " struct " &B) {\n" )
  (c-indent-command) (insert "if (A." );

  (pitaj "" "Ime varijable (nista za prekid): " ) (setq a ret)
  (while (not (string= a "")) 
         (insert a " != B." a ") return A." a " < B." a ";\n")
         (c-indent-command) (insert "if (A.")
         (pitaj "" "Ime varijable (nista za prekid): " ) (setq a ret)
  )
  (delete-char -6 )
  (insert "return 0;\n}" )
  (c-indent-command) (insert "\n" )
  (c-indent-command)
)
(defun luka-all() (interactive)
  (pitaj "all( " "Container: " ) (setq a ret)
  (insert a ".begin(), " a ".end()" )
)
(defun luka-sort () (interactive)
  (insert "sort(" )
  (pitaj "" "Container: " ) (setq a ret)
  (insert a ".begin(), " a ".end());" )
)
(defun luka-reverse () (interactive)
  (insert "reverse(" )
  (pitaj "" "Container: " ) (setq a ret)
  (insert a ".begin(), " a ".end());" )
)
(defun luka-permute() (interactive)
  (insert "sort(" )
  (pitaj "" "Container: " ) (setq a ret)
  (insert a ".begin(), " a ".end());\n" )
  (c-indent-command) (insert "do {\n\n} " )
  (c-indent-command) (insert "while (next_permutation(" a ".begin(), " a ".end()));\n" )
  (previous-line 2) (c-indent-command) 
)
(defun luka-set-union() (interactive)
  (insert "set_union(" )
  (pitaj "" "Prvi set: " ) (setq a ret)
  (insert a ".begin(), " a ".end(), " )
  (pitaj "" "Drugi set: " ) (setq b ret)
  (insert b ".begin(), " b ".end(), inserter(" )
  (pitaj "" "Treci set: " ) (setq c ret)
  (insert c ", " c ".begin()));" )
)
(defun luka-set-intersection() (interactive)
  (insert "set_intersection(" )
  (pitaj "" "Prvi set: " ) (setq a ret)
  (insert a ".begin(), " a ".end(), " )
  (pitaj "" "Drugi set: " ) (setq b ret)
  (insert b ".begin(), " b ".end(), inserter(" )
  (pitaj "" "Treci set: " ) (setq c ret)
  (insert c ", " c ".begin()));" )
)
(defun luka-memnull () (interactive)
  (insert "memset(" )
  (pitaj "" "Array: " ) (setq a ret)
  (insert a ", 0, (sizeof) " a ");" )
)
(defun luka-meminf () (interactive)
  (insert "memset(" )
  (pitaj "" "Array: " ) (setq a ret)
  (insert a ", 0x3F, (sizeof) " a ");" )
)
